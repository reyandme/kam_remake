procedure OnMissionStart;
var mapWidth, mapHeight, x, y, t, w, i, plus, p:integer;
var isAI, startPos: boolean;
var mode:string;
var units:array of integer;
var arr: array of AnsiString;
var text: AnsiString;
begin
	mapWidth := States.MapWidth();
	mapHeight := States.MapHeight();
	p := 3;
	
	//iterating through each coordinate on map
	for x := 1 to mapWidth - 1 do begin
		for y := 1 to mapHeight - 1 do begin
			//getting type of map tile
			t := States.MapTileType(x, y);
			//if map tile is 62/55 (field/winefield) we need to override this type into green grass because it will be looging very ugly on the generateed map.
			if ((t = 62) OR (t = 55)) then t := 0;
			//getting object on this coord
			w := States.MapTileObject(x, y);
			//if object is between 54 and 59 (fields) we need to override this object into 255 (none) because fields will be not able to add
			if ((w >= 54) AND (w <= 59)) then w := 255;
			//logging string in format compatible with MapTilesArraySetS function
			Actions.Log(IntToStr(x) + ',' + IntToStr(y) + ',' + IntToStr(t) + ',' + IntToStr(States.MapTileRotation(x, y)) + ',' + IntToStr(States.MapTileHeight(x, y)) + ',' + IntToStr(w) + ';');
		end;
	end;

	//iterating through all players
	for x := 0 to 11 do begin
		//checking if player is AI
		isAI := States.PlayerIsAI(x);
		//getting all houses if this player
		units := States.PlayerGetAllHouses(x);
		//boolean variable indicating if there is a start position setted for AI player already
		startPos := false;
		//human player has always script id = 0
		//but if you want to handle few enemies in merged mission you need to add this enemies as separate players in order to set different color for each of them
		//because in merged maps AI players should have numbering from 1 - X we can adjust Id of each AI player into our merged mission, so in the first mapped mission plus should be equal to 1, in second plus should be equal to 2 etc. Of course if you have 3 enemies in first mission then plus will be 1 but in second mission plus should start from 4 (because 0 is assigned to human players and 1-3 is assigned to enemies from first mission).
		if (x = 0) then plus := 0 else plus := p;
		//iterate through houses
		for y := 0 to Length(units) - 1 do begin
			//getting house type
			t := States.HouseType(units[y]);
			//Logging this house
			Actions.Log('Actions.GiveHouse(' + IntToStr(x + plus) + ',' + IntToStr(t) + ',' + IntToStr(States.HousePositionX(units[y])) + ',' + IntToStr(States.HousePositionY(units[y])) + ');');
			//we checked if current house is storehouse / barracks in order to map wares in it and logging this amounts into log file
			if (t = 11) then begin
				for i := 0 to 27 do begin
					w := States.HouseResourceAmount(units[y], i);
					if (w > 0) then Actions.Log('Actions.HouseAddWaresTo(States.HouseAt(' + IntToStr(States.HousePositionX(units[y])) + ',' + IntToStr(States.HousePositionY(units[y])) + '),' + IntToStr(i) + ',' + IntToStr(w) + ');');
				end;	
				
				//if player is AI and start position is not defined we need to add start position for this player
				if ((isAI) AND (startPos = false)) then begin
					Actions.Log('Actions.AIStartPosition(' + IntToStr(x + plus) + ',' + IntToStr(States.HousePositionX(units[y])) + ',' + IntToStr(States.HousePositionY(units[y])) + ');');
					startPos := true;
				end;
			end
			else if (t = 21) then begin
				for i := 16 to 26 do begin
					w := States.HouseResourceAmount(units[y], i);
					if (w > 0) then Actions.Log('Actions.HouseAddWaresTo(States.HouseAt(' + IntToStr(States.HousePositionX(units[y])) + ',' + IntToStr(States.HousePositionY(units[y])) + '),' + IntToStr(i) + ',' + IntToStr(w) + ');');
				end;	
			end;
		end;
	end;

	//iterate through players
	for t := 0 to 11 do begin
		//checking if players is enabled (exists)
		if ((States.PlayerDefeated(t) = false) AND (States.PlayerEnabled(t))) then begin
			if (x = 0) then plus := 0 else plus := p;	
			for x := 1 to mapWidth - 1 do begin
				for y := 1 to mapHeight - 1 do begin
					//logging roads/fields/winefields on specified coordinates
					if (States.IsRoadAt(t, x, y) AND (States.HouseAt(x, y) < 0)) then Actions.Log('Actions.GiveRoad(' + IntToStr(t + plus) + ',' + IntToStr(x) + ',' + IntToStr(y) + ');');
					if (States.IsFieldAt(t, x, y) AND (States.HouseAt(x, y) < 0)) then Actions.Log('Actions.GiveField(' + IntToStr(t + plus) + ',' + IntToStr(x) + ',' + IntToStr(y) + ');');
					if (States.IsWinefieldAt(t, x, y) AND (States.HouseAt(x, y) < 0)) then Actions.Log('Actions.GiveWinefield(' + IntToStr(t + plus) + ',' + IntToStr(x) + ',' + IntToStr(y) + ');');
				end;
			end;
		end;
	end;
	
	//iterating through players
	for x := 0 to 11 do begin
		if (x = 0) then plus := 0 else plus := p;
		isAI := States.PlayerIsAI(x);
		units := States.PlayerGetAllUnits(x);
		//iterating through units and log them
		for y := 0 to Length(units) - 1 do begin
			t := States.UnitType(units[y]);
			if (t <= 13) then Actions.Log('Actions.GiveUnit(' + IntToStr(x + plus) + ',' + IntToStr(t) + ',' + IntToStr(States.UnitPositionX(units[y])) + ',' + IntToStr(States.UnitPositionY(units[y])) + ',' + IntToStr(States.UnitDirection(units[y])) + ');');
		end;
		
		//getting all groups of specified player
		units := States.PlayerGetAllGroups(x);
		for y := 0 to Length(units) - 1 do begin
			//checking unit types inside this group and logging them
			t := States.UnitType(States.GroupMember(units[y], 0));
			if (t > 13) then begin
				Actions.Log('Actions.GiveGroup(' + IntToStr(x + plus) + ',' + IntToStr(t) + ',' + IntToStr(States.UnitPositionX(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.UnitPositionY(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.UnitDirection(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.GroupMemberCount(units[y])) + ',' + IntToStr(States.GroupColumnCount(units[y])) + ');');
				//if player is ai then we need to add defence positions
				if (isAI) then begin
					//based on single soldier group we can add defence positions for attack, for other groups we add defence positions for defence
					if (States.GroupMemberCount(units[y]) <= 1) then Actions.Log('Actions.AIDefencePositionAdd(' + IntToStr(x + plus) + ',' + IntToStr(States.UnitPositionX(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.UnitPositionY(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.UnitDirection(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.GroupType(units[y])) + ',20,1);')
					else Actions.Log('Actions.AIDefencePositionAdd(' + IntToStr(x + plus) + ',' + IntToStr(States.UnitPositionX(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.UnitPositionY(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.UnitDirection(States.GroupMember(units[y], 0))) + ',' + IntToStr(States.GroupType(units[y])) + ',20,0);');
				end;
			end;
		end;
	end;
	
	//mapping animals
	for x := 1 to mapWidth - 1 do begin
		for y := 1 to mapHeight - 1 do begin
			if (States.UnitAt(x, y) > 0) then begin
				t := States.UnitType(States.UnitAt(x, y));
				if (t >= 30) then Actions.Log('Actions.GiveAnimal(' + IntToStr(t) + ',' + IntToStr(x) + ',' + IntToStr(y) + ');');
			end;
		end;
	end;

end;