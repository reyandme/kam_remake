{-----------------------------------------------------------------------------------------
 The Conquest
 Script by sado, idea by sado & dicsoupcan
 Map by dicsoupcan - THANKS for all the hard work! And sorry that I made you hate snow :(
 Winning conditions based on Lewin's Battle of Octumn script, with permission
 Additional thanks to everyone who tested it with us on Teamspeak...
 Without all of you helping to balance the map, it wouldn't even be fun to play it!
 
 Additional thanks to the translators:
 Czech - Bludmaster
 Dutch - dicsoupcan and TDL
 French - Shadaoe
 German - Siegfried (and Weekend? :P)
 Hungarian - Bence, Thunder
 Russian - Mercenary, andreus


 Everyone is allowed to use this script, or parts of it, as long as you give me credit by 
  mentioning who made the original script.  I'd like to encourage everyone to try and make 
  new different Conquest mode maps, I'll be glad to help with scripting :)
------------------------------------------------------------------------------------------
v 1.1
- changes to map - opened middle, added lake near the lower stable, slight rebalance of buildings
- 10 second time of taking a building
- translation fixes

TODO
rebalance - more power to the players
make sure the mid locs are interesting
write down new timings in readme
add PDF and translate it








------------------------------------------------------------------------------------------
On each side:
4 cutters - militia 
4 weapon workshops - axemen
4 l. armories - bowmen
2 tanneries - lancemen
2 iron weaponries - swordmen
1 iron armory - xbows
1 iron smelter - pikes
1 stable - knights
Extra buildings:
1 tower near each stable - it can be captured, the stone there will refill slowly
1 farm - gives random units

For 1 building, you get:
1 militia each 20 seconds
1 leather unit each 45 seconds //30-->45
1 iron unit each 60 seconds    //40-->60
1 knight each 90 seconds       //50-->90
1 random unit (from the farm) each 120 seconds
-----------------------------------------------------------------------------------------}
const
TotalLocs = 6;
Team1Name = '<$4>';
Team2Name = '<$5>';
NrOfBuildings = 100; // number of buildings per player - I got pissed off and didn't know how to force PAscal to work with dynamic array properly here LOL
TotalFails = 3;
TIME_TAKE_BUILDING = 10;    // in seconds

var Team1, Team2: Integer;
var FailTimer, FailCount: array[0..(TotalFails - 1)] of array[0..(TotalLocs - 1)] of Integer;
var HousesDetails: array[0..TotalLocs] of array[0..NrOfBuildings] of array[0..2] of Integer;

//lines below are taken from Battle of Octumn script, used with permission
function PlayerHasUndefeatedEnemy(aPlayer: Integer): Boolean;
var I: Integer;
begin
  Result := False;
  for I:=0 to (TotalLocs - 1) do
	if (I <> aPlayer) //Don't check ourselves
	and States.PlayerEnabled(I) //Only check players which are enabled
	and not States.PlayerDefeated(I) //Don't check defeated players
	and not States.PlayerAllianceCheck(aPlayer, I) then //Is this player an enemy?
	begin
	  //We found an enemy who is not defeated, no need to check further
	  Result := True;
	  Exit;
	end;
end;

procedure CheckForWinner;
var I: Integer;
begin
  //Find a player with no enemies left, except those who were defeated
  for I:=0 to (TotalLocs - 1) do
    if States.PlayerEnabled(I) //Only enabled players
	and not PlayerHasUndefeatedEnemy(I) then //Does this player have any enemies left?
	begin
      Actions.PlayerWin([I], True); //This player and his team wins
	  Exit; //Don't check any more players, team victory took care of his team winning
	end;
end;
//
//end of BoO script
//

function SadoRandomHouse: Integer;
var Random: Integer;
begin
   Random := States.KaMRandomI(7);
   case Random of
   0: Result := 25;
   1: Result := 1;
   2: Result := 2;
   3: Result := 10;
   4: Result := 12;
   5: Result := 19;
   6: Result := 20;
   end;
end;

procedure ReloadOverlay;
begin
	Actions.OverlayTextSet(-1, '<$6>|' + Team1Name + ': ' + IntToStr(Team1) + '|' + Team2Name + ': ' + IntToStr(Team2));
end;

procedure FailCase(FailID, UnitOwner, ContextDetail: Integer); //this is used both in YouFail and in SadoSetHouseOwner
begin
if (FailCount[FailID][UnitOwner] = 3) and ((FailID = 2) or (FailTimer[FailID][UnitOwner] + 100 > States.GameTime)) then //if 3 failures in 10 seconds
		case FailID of									      // then show the message for 10 seconds
		0: Actions.OverlayTextAppend(UnitOwner, '|<$1>');
		1: Actions.OverlayTextAppend(UnitOwner, '|<$2>');
		2: Actions.OverlayTextAppend(UnitOwner, '|<$3>: ' + States.HouseTypeName(States.HouseType(ContextDetail)));
		end;
end;

procedure YouFail(FailID, UnitOwner, ContextDetail: Integer); //this procedure handles overlay tips, in case someone didn't read the rules or something :)
begin
	if FailTimer[FailID][UnitOwner] = 0 then
		FailTimer[FailID][UnitOwner] := States.GameTime;
	FailCount[FailID][UnitOwner] := FailCount[FailID][UnitOwner] + 1;
	FailCase(FailID, UnitOwner, ContextDetail);
end;

procedure OnMissionStart;
var P, HouseID, I, J, B, HouseType: Integer;
var Houses: array of Integer;
begin
 CheckForWinner;
 //Actions.ShowMsg(-1,'<$0>'); //tutorial message
 for P := 0 to TotalLocs-1 do
    begin
      if States.PlayerEnabled(P) then
      begin
         Actions.PlayerShareFog(TotalLocs, P, False);
         Actions.FogCoverAll(P);
      end;
    end;
 for P := 0 to TotalLocs do
 begin
    for B := 0 to NrOfBuildings-1 do
    begin
        //Actions.Log('poczatkowe1: P=' + IntToStr(P) + ' I=' + IntToStr(I) + ' HouseID=' + IntToStr(HouseID) );
        HousesDetails[P][B][0] := -1;
        //Actions.Log('poczatkowe2: P=' + IntToStr(P) + ' I=' + IntToStr(I) + ' HouseID=' + IntToStr(HouseID) );
        HousesDetails[P][B][1] := -1;
        //Actions.Log('poczatkowe3: P=' + IntToStr(P) + ' I=' + IntToStr(I) + ' HouseID=' + IntToStr(HouseID) );
    end;
    if States.PlayerEnabled(P) then
        begin
            Houses := States.PlayerGetAllHouses(P);
            for I := 0 to Length(Houses)-1 do
            begin
                HouseID := Houses[I];
                HouseType := States.HouseType(HouseID);
                HousesDetails[P][I][0] := HouseID;
                HousesDetails[P][I][1] := -1;
                case P of
                    TotalLocs: for J := 0 to ( TotalLocs - 1 ) do
                            if States.PlayerEnabled(J) then
                                Actions.FogRevealCircle(J, States.HousePositionX(HouseID), States.HousePositionY(HouseID), 3);
                    else for J := 0 to ( TotalLocs - 1 ) do
                    begin
                        if States.PlayerEnabled(J) and (States.PlayerAllianceCheck( P, J ) = True ) then
                            Actions.FogRevealCircle(J, States.HousePositionX(HouseID), States.HousePositionY(HouseID), 16);
                        if States.PlayerEnabled(J) and (HouseType = 17) or (HouseType = 12) then
                            Actions.FogRevealCircle(J, States.HousePositionX(HouseID), States.HousePositionY(HouseID)-1, 3);
                    end;
                end;
                Actions.HouseDisableUnoccupiedMessage(HouseID, True);
                if HouseType = 13 then
                    Actions.HouseSchoolQueueAdd(HouseID, 13, 1);
                //team buildings counters
                if (P > (TotalLocs / 2 - 1)) and (P <> TotalLocs) and (HouseType <> 13) and (HouseType <> 21) then
                    begin
                    Inc(Team2);
                    end
                    else if (P <> TotalLocs) and (HouseType <> 13) and (HouseType <> 21) then
                    Inc(Team1);
            end;
        end;
 end;
 ReloadOverlay;
end;

procedure SadoGivePlayerUnit(P: Integer; TypeOfHouse: Integer; TimeOffset: Integer; HouseID: Integer);
begin
   //we check what is the value of TypeOfHouse, for example if it's 9 then it's woodcutter
   case TypeOfHouse of
   9:  if (TimeOffset mod 200 = 0) then //woodcutter=militia
         Actions.GiveWeapons(P, 20, 1); //axe
   19:  if (TimeOffset mod 450 = 0) then //weapon workshop=axeman
         begin
            Actions.GiveWeapons(P, 20, 1);
            Actions.GiveWeapons(P, 16, 1); //wooden shield
            Actions.GiveWeapons(P, 18, 1); //leather armor
         end;
   12: if (TimeOffset mod 900 = 0) then //stables=knight
         begin
            Actions.GiveWeapons(P, 21, 1); //sword
            Actions.GiveWeapons(P, 17, 1); //iron shield
            Actions.GiveWeapons(P, 19, 1); //iron armor
            Actions.GiveWeapons(P, 26, 1); //horse
         end;
   2:  if (TimeOffset mod 600 = 0) then //weapon smithy=swordman
         begin
            Actions.GiveWeapons(P, 21, 1);
            Actions.GiveWeapons(P, 17, 1);
            Actions.GiveWeapons(P, 19, 1);
         end;
   20: if (TimeOffset mod 450 = 0) then //armory workshop=bowman
         begin
            Actions.GiveWeapons(P, 24, 1); //bow
            Actions.GiveWeapons(P, 18, 1);
         end;
   10: if (TimeOffset mod 600 = 0) then //armor smithy=crossbowman
         begin
            Actions.GiveWeapons(P, 25, 1); //crossbow
            Actions.GiveWeapons(P, 19, 1);
         end;
   
   25: if (TimeOffset mod 450 = 0) then //tannery=lanceman
         begin
            Actions.GiveWeapons(P, 22, 1); //lance
            Actions.GiveWeapons(P, 18, 1);
         end;
   1: if (TimeOffset mod 600 = 0) then //iron smithy=pikeman
         begin
            Actions.GiveWeapons(P, 23, 1); //pike
            Actions.GiveWeapons(P, 19, 1);
         end;
   //special purpose buildings
   17: if (P <> 6) and (TimeOffset mod 600 = 0) then //tower
         begin
            Actions.HouseAddWaresTo(HouseID, 1, 1);
			Actions.UnitHungerSet(States.UnitAt(States.HousePositionX(HouseID), States.HousePositionY(HouseID)), States.UnitMaxHunger);
         end;
   8: if (TimeOffset mod 1200 = 0) then //farm
         begin
            SadoGivePlayerUnit( P, SadoRandomHouse, 0, HouseID ); //recursion ftw
         end;
   end;
end;

//I see no reason to make this map food wars :)
procedure OnWarriorEquipped(UnitID: Integer; GroupID: Integer);
begin
 Actions.UnitHungerSet(UnitID, States.UnitMaxHunger);
end;

//inifinite gold and recruits production
procedure OnUnitTrained(UnitID: Integer);
var School: Integer;
begin
 //we just trained an unit, so it must be walking out of the school...
 //let's get the school's HouseID then:
 School := States.HouseAt(States.UnitPositionX(UnitID), States.UnitPositionY(UnitID) - 1);
 if School <> -1 then
 begin
   //refill the school with gold, and add one recruit to the queue:
   Actions.HouseAddWaresTo(School, 7, 1);
   Actions.HouseSchoolQueueAdd(School, 13, 1);
 end;
end;

procedure SadoSetHouseOwner(ID: Integer; P: Integer); //P is player that wants to steal the house; Player is just a helper variable
var TypeOfHouse, PreviousOwner, X, Y, NewHouse, B: Integer;
begin //the idea: we cant set owner, but we can destroy and create a building :)
   PreviousOwner := States.HouseOwner(ID);
   TypeOfHouse := States.HouseType(ID); //need to save parameters somewhere before I destroy the building
   X := States.HousePositionX(ID);   //same here
   Y := States.HousePositionY(ID);   //and here
   Actions.HouseDestroy(ID, True);
   Actions.UnitKill(States.UnitAt(X,Y), True);
   NewHouse := Actions.GiveHouse(P, TypeOfHouse, X, Y);
   if (TypeOfHouse = 17) then
      Actions.UnitHungerSet( Actions.GiveUnit(P, 13, X, Y+1, 0), States.UnitMaxHunger);
   Actions.HouseDisableUnoccupiedMessage(NewHouse, True);
   ReloadOverlay;
   for B := 0 to length(HousesDetails[P])-1 do
   begin
    if (HousesDetails[P][B][0] = ID) then
    begin
        HousesDetails[P][B][0] := NewHouse;
        HousesDetails[P][B][1] := -1;
    end;
   end;
   //here add overlay tip for all players
   {for Player := 0 to (TotalLocs - 1) do
		for Fail := 0 to (TotalFails - 1) do
		begin
			if (FailCount[FailID, UnitOwner] > 3) then
				FailCount[FailID, UnitOwner] := 3;
			FailCase[I, Player);
		end;}
end;

procedure OnTick;
var I, P, F, B, HouseID, UnitID, HouseType, TimeOffset, Owner: Integer;
var Houses: array of Integer;
begin
   for P := 0 to TotalLocs do
   begin
    if (States.GameTime + P) mod 10 = 0 then  //each second(=10 ticks), do:
    begin
      //TimeOffset is current time + player number. We add player number to not do all
      //players at once - each player will be done in a separate "tick" (1/10th of a second)
      TimeOffset := (States.GameTime + P);
      //if you want to use something many times, it's better to optimize the code and save
      //it as a variable - thats why we save the array with houses, so we don't have to
      //call PlayerGetAllHouses each time in for loop...
      if States.PlayerEnabled(P) then
         Houses := States.PlayerGetAllHouses(P);
      //we start from zero, but length is counted from 1... so we subtract 1 from the Length
      //so, we take all the buildings of a player, and I is the number of the house
      for I := 0 to Length(Houses)-1 do
      begin
         //we take the "I-th" house and save it temporarily as HouseID
         HouseID := Houses[I];
         //we save its type also
         HouseType := States.HouseType(HouseID);
         //we set UnitID to ID of an unit which is supposed to be standing in front door of the
         //building; if there's no one standing there, the unit ID will be set to -1 by the game
         UnitID := States.UnitAt( States.HousePositionX(HouseID), States.HousePositionY(HouseID)+1 );
         //We check:
         // if there's a soldier in the door (if not, then unit ID will be -1)
         // if the building is a school (13) or barracks (21),
         // if the soldier is an enemy for the current building owner
         // if... the "soldier" isn't a wolf (unit type 30) xD (Yes, that happens...) or a recruit (unit type 13)
         // if the soldier isn't a scout or a knight - tweak for this particular map. If the map is too big,
         //   then taking over buildings with horsemen is too easy and too hard to prevent... disable this
         //   if you're making a smaller and more closed Conquest map than this original one
         
         if (UnitID <> -1) then
         begin
		  Owner := States.UnitOwner(UnitID);
          if (HouseType <> 13) and (HouseType <> 21)
          and (Owner <> P)
          and (States.UnitType(UnitID) <> 30) and (States.UnitType(UnitID) <> 13) then
		  begin
		  
          if (States.UnitType(UnitID) = 21) 
		  or (States.UnitType(UnitID) = 22) then
			YouFail(0, Owner, 0)
		  else if States.PlayerEnabled(P) and ( States.PlayerAllianceCheck( Owner, P ) ) and (HouseType = 17) then //and here 
			YouFail(1, Owner, 0)
          else begin
                        //is someone trying to take this building now?
              //                HousesDetails[P][I][0] := HouseID;
              //  HousesDetails[P][I][1] := -1;
              for B := 0 to length(HousesDetails[P])-1 do
              begin
                if (HousesDetails[P][B][0] = HouseID) then
                begin
                    YouFail(2, Owner, HouseID);
                    if (HousesDetails[P][B][1] = -1) then
                    begin
                        HousesDetails[P][B][1] := States.GameTime;
                    end 
                    else if (HousesDetails[P][B][1] <> -2) and (HousesDetails[P][B][1] + 10*TIME_TAKE_BUILDING < States.GameTime) then
                    begin 
                        if (Owner > (TotalLocs/2 - 1)) and ( ( States.PlayerAllianceCheck( Owner, P ) = False ) or ( P = TotalLocs ) ) then
                        begin
                        Inc(Team2);
                        if P <> TotalLocs then
                            Dec(Team1);
                        end
                        else if (Owner < (TotalLocs/2)) and ( ( States.PlayerAllianceCheck( Owner, P ) = False ) or ( P = TotalLocs ) ) then
                        begin
                        Inc(Team1);
                        if P <> TotalLocs then
                            Dec(Team2);
                        end;
                        SadoSetHouseOwner(HouseID, States.UnitOwner(UnitID));
                        HousesDetails[P][B][1] := -1;
                    end;
                end;
              end;
          end; //if states.unittype... 
		 end;  //if housetype...
         end  //if unitid...
         else
         begin
             for B := 0 to length(HousesDetails[P])-1 do
              begin
                if (HousesDetails[P][B][0] = HouseID) then
                begin
                    HousesDetails[P][B][1] := -1;
                end;
              end;
         end;  //if unitid...
         SadoGivePlayerUnit( P, HouseType, TimeOffset, HouseID );
      end; //for I...
	  for F := 0 to (TotalFails - 1) do
				if ( P <> TotalLocs ) and (FailCount[F][P] > 3) and (FailTimer[F][P] + 100 < States.GameTime) then
					begin
						FailTimer[F][P] := 0;
						FailCount[F][P] := 0;
						ReloadOverlay;
					end;
    end;   //if gametime...
    if States.PlayerEnabled(P) and not States.PlayerDefeated(P) then //winning conditions
      if (States.StatArmyCount(P)=0) and (States.StatHouseTypeCount(P, 21)=0) then
      begin
        Actions.PlayerDefeat(P);
        CheckForWinner;
      end;
   end;    //for P...
end;
