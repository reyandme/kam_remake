//-- TPR03 --//
//20.01.2018

//Gives AI-Players Units a Random Hunger Level (2/3 to Max)
procedure UnitsRandomHungerSet();
var 
	aUnits: array of Integer;
	i, iGroup: Integer;
	iPlayerLoop: Byte;
begin
for iPlayerLoop := 0 to States.StatPlayerCount()-1 do
	begin
		if States.PlayerIsAI(iPlayerLoop) then
		begin
			aUnits := States.PlayerGetAllUnits(iPlayerLoop);
			for i := 0 to Length(aUnits)-1 do
			begin
				if States.UnitsGroup(aUnits[i]) = -1 then
				begin
					Actions.UnitHungerSet(aUnits[i], States.UnitMaxHunger/2 + States.KaMRandomI(States.UnitMaxHunger/2 +1));
				end else
				begin
					iGroup := States.UnitsGroup(aUnits[i]);
					if States.GroupMember(iGroup, 0) = aUnits[i] then
						Actions.GroupHungerSet(iGroup, States.UnitMaxHunger/2 + States.KaMRandomI(States.UnitMaxHunger/2 +1));
				end;
			end;
		end;
	end;
end;

//Returns Sight Ranges for Houses
function HouseSightRange(aHouseID: Integer): Byte;
begin
	case States.HouseType(aHouseID) of
		0..10, 12..16, 19, 20, 22..29: Result := 10; //Normal Houses
		11, 18, 21: Result := 13; //Barracks/Storehouse/Townhall
		17: Result := 18; //Tower
	end;
end;

//Returns Sight Ranges for Units
function UnitSightRange(aUnitsID: Integer): Byte;
begin
	case States.UnitType(aUnitsID) of
		0..13: Result := 4; //Civilians
		14..20, 22..27: Result := 9; //Fighting Units
		21: Result := 16; //Scout
		//28..37: Animals
	end;
end;

//UnAllow ALL Buildings for specified Player
procedure LockBuildings(iPlayer: Byte);
var i: Byte;
begin
	for i := 0 to 29 do
		if i <> 26 then //26 is not in use
			Actions.HouseAllow(iPlayer, i, false);
	Actions.HouseAllow(iPlayer, 11, true); //Storehouse always unlocked
end;

//Use Traditionl Unlock Order for Houses (Overwrites Static Script settings: Comment out Houses that are supposed to be blocked here!)
procedure TraditionalUnlock(iPlayer: Byte; iHouseID: Integer);
begin
	case States.HouseType(iHouseID) of
		0: 	begin //Sawmill
			//	Actions.HouseAllow(iPlayer, 4, true); //Iron Mine
			//	Actions.HouseAllow(iPlayer, 5, true); //Gold Mine
			//	Actions.HouseAllow(iPlayer, 3, true); //Coal Mine
				Actions.HouseAllow(iPlayer, 28, true); //Vineyard
				Actions.HouseAllow(iPlayer, 8, true); //Farm
				Actions.HouseAllow(iPlayer, 19, true); //Weapons Workshop
				Actions.HouseAllow(iPlayer, 21, true); //Barracks
				Actions.HouseAllow(iPlayer, 6, true); //Fisherman
			end;
		1: 	begin // Iron Smithy
				Actions.HouseAllow(iPlayer, 2, true); //Weapon Smithy
				Actions.HouseAllow(iPlayer, 10, true); //Armor Smithy
			end;
		2: exit; // Weapon Smithy
		3: exit; //Coal Mine
		4: Actions.HouseAllow(iPlayer, 1, true); //Iron Mine -> Iron Smithy
		5: Actions.HouseAllow(iPlayer, 15, true); //Gold Mine -> Metallurgist
		6: exit; //Fisherman's Hut
		7: exit; //Bakery
		8: 	begin //Farm
			//	Actions.HouseAllow(iPlayer, 12, true); //Stables
				Actions.HouseAllow(iPlayer, 16, true); //Swine Farm
				Actions.HouseAllow(iPlayer, 22, true); //Mill
			end;
		9: Actions.HouseAllow(iPlayer, 0, true); //Woodcutter -> Sawmill
		10: exit; //Armor Smithy
		11: Actions.HouseAllow(iPlayer, 13, true); //Storehouse -> School
		12: exit; //Stables
		13: Actions.HouseAllow(iPlayer, 27, true); //School -> Inn
		14: begin //Quarry
				Actions.HouseAllow(iPlayer, 9, true); //Woodcutter
			//	Actions.HouseAllow(iPlayer, 17, true); //Watch Tower
			end;
		15: exit; //Metallurgist's
		16:	begin //Swine Farm
				Actions.HouseAllow(iPlayer, 24, true); //Butcher
				Actions.HouseAllow(iPlayer, 25, true); //Tannery
			end;
		17: exit; //Watch Tower
		18: exit; //Townhall
		19: exit; //Weapons Workshop
		20: exit; //Armor Workshop
		21: exit; //Barracks
		22: Actions.HouseAllow(iPlayer, 7, true); //Mill -> Bakery
		23: exit; //Vehicles Workshop
		24: exit;//Butcher's
		25: Actions.HouseAllow(iPlayer, 20, true); //Tannery -> Armor Workshop
		26: exit; //Unused
		27: Actions.HouseAllow(iPlayer, 9, true); //Inn -> Woodcutter (Just this time: No Stone in this map!)
		28: exit; //Vineyard
		29: exit; //Market
	end;
end;

procedure OnMissionStart();
var
	i, j: Integer;
	aUnits, aHouses: array of Integer;
begin
	LockBuildings(0);
	//Set Hunger Level of AIs
	UnitsRandomHungerSet();
	//Disable Sharing Fog With Ally
	Actions.PlayerShareFog(0, 1, false);
	Actions.PlayerShareFog(1, 0, false);
	//Cover All In Fog
	Actions.FogCoverAll(0);
	//Reveal Terrain For Units And Buildings
	aUnits := States.PlayerGetAllUnits(0);
	for i := 0 to Length(aUnits) -1 do
		Actions.FogRevealCircle(0, States.UnitPositionX(aUnits[i]), States.UnitPositionY(aUnits[i]), UnitSightRange(aUnits[i]));
	aHouses := States.PlayerGetAllHouses(0);
	for j := 0 to Length(aHouses) -1 do
	begin
		Actions.FogRevealCircle(0, States.HousePositionX(aHouses[j]), States.HousePositionY(aHouses[j]), HouseSightRange(aHouses[j]));
		//Unlock Houses
		TraditionalUnlock(0, aHouses[j]);
	end;
	//Reveal certain areas of the Map to Player0
	Actions.FogRevealCircle(0, 69, 93, 6);
	Actions.FogRevealCircle(0, 72, 102, 6);
	Actions.FogRevealCircle(0, 76, 99, 6);
	Actions.FogRevealCircle(0, 6, 105, 8);
	Actions.FogRevealCircle(0, 17, 105, 9);
	Actions.FogRevealCircle(0, 26, 103, 9);
	Actions.FogRevealCircle(0, 36, 102, 10);
	Actions.FogRevealCircle(0, 46, 102, 10);
	Actions.FogRevealCircle(0, 57, 102, 12);
end;

procedure OnHouseBuilt(aHouseID: Integer);
var iOwner: Byte;
begin
	iOwner := States.HouseOwner(aHouseID);
	if iOwner = 0 then
		TraditionalUnlock(iOwner, aHouseID);
end;

procedure OnTick;
begin
	//Message After 15 Seconds
	if States.GameTime = 150 then
		Actions.ShowMsg(0, '<$0>');
end;